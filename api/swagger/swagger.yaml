swagger: "2.0"
info:
  version: "1.0"
  title: Barber API
host: localhost:3000
basePath: /
schemes:
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
  
  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid email & password.
  
  
     The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz
consumes:
  - application/json
produces:
  - application/json
paths:
  /register:
    x-swagger-router-controller: register.controller
    post:
      operationId: registerUser
      description: "Register User"
      security:
        - Bearer: []
      x-security-scopes:
        - funcionario
      parameters:
        - name: registration
          in: body
          required: true
          schema:
            $ref: "#/definitions/Registration"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Success"
        "400":
          description: "Default Error"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /login:
    x-swagger-router-controller: login.controller
    post:
      operationId: loginPost
      description: "Login"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
        "400":
          description: "Default Error"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
definitions:
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "email"
      password:
        type: string
        example: "password"
  Registration:
    type: object
    properties:
      username:
        type: string
        example: "email"
      password:
        type: string
        example: "password"
      cargo:
        type: string
        example: "FUNCIONARIO"
  Token:
    type: object
    properties:
      token:
        type: string
  Success:
    type: object
    properties:
      message:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string